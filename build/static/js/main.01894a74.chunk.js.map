{"version":3,"sources":["services/personsService.js","App.js","serviceWorker.js","index.js"],"names":["baseUrl","axios","get","then","response","data","newObject","post","id","put","delete","DisplayPhoneBook","nameFilter","handleNewFilter","value","onChange","Error","message","className","Notification","AddNewPerson","props","onSubmit","addPerson","newName","handleNewName","newNumber","handleNewNumber","type","App","useState","persons","setPersons","setNewName","setNewNumber","setNewFilter","errorMessage","setErrorMessage","notification","setNotification","useEffect","personService","initialNotes","personsToShow","filter","person","name","includes","event","target","preventDefault","existPerson","find","undefined","number","returnedPerson","concat","setTimeout","window","confirm","changedPerson","returnedNote","map","note","catch","i","key","onClick","deleteHandler","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console"],"mappings":"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","file":"static/js/main.01894a74.chunk.js","sourcesContent":["import axios from 'axios'\nconst baseUrl = '/api/persons'\n\nconst getAll = () => {\n  const request = axios.get(baseUrl)\n  return request.then(response => response.data)\n}\n\nconst create = newObject => {\n  const request = axios.post(baseUrl, newObject)\n  return request.then(response => response.data)\n}\n\nconst update = (id, newObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\n  return request.then(response => response.data)\n}\n\nconst deletePerson = (id) => {\n  const request = axios.delete(`${baseUrl}/${id}`)\n  return request.then(response =>  response.data)\n}\n\nexport default { getAll, create, update, deletePerson}\n","import React, { useState, useEffect } from 'react'\nimport personService from './services/personsService'\nimport './App.css'\n\nconst DisplayPhoneBook =({nameFilter, handleNewFilter}) => {\n  return (\n    <>\n    <h1>Phonebook</h1>\n    <div>\n      Filter by name \n      <input value={nameFilter} onChange={handleNewFilter} />\n    </div>\n    </>\n  )\n}\nconst Error = ({ message }) => {\n  if (message === null) {\n    return null\n  }\n\n  return (\n    <div className=\"error\">\n      {message}\n    </div>\n  )\n}\n\nconst Notification = ({ message }) => {\n  if (message === null) {\n    return null\n  }\n\n  return (\n    <div className=\"notification\">\n      {message}\n    </div>\n  )\n}\n\nconst AddNewPerson = (props) => {\n  return (\n    <>\n      <h2> Add New </h2>\n      <form onSubmit={props.addPerson}>\n        <div>\n          name: <input value={props.newName} onChange={props.handleNewName}/>\n        </div>\n        <div>\n          number: <input value={props.newNumber} onChange={props.handleNewNumber} />\n        </div>\n        <div>\n          <button type=\"submit\">add</button>\n        </div>\n      </form>\n    </>\n  )\n\n}\nconst App = () => {\n  const [persons, setPersons] = useState([])\n  const [ newName, setNewName ] = useState('')\n  const [ newNumber, setNewNumber ] = useState('')\n  const [ nameFilter, setNewFilter] = useState('')\n  const [errorMessage, setErrorMessage] = useState('')\n  const [notification, setNotification] = useState('')\n\n  useEffect(() => {\n    personService\n      .getAll()\n      .then(initialNotes => {\n        setPersons(initialNotes)\n      })\n  }, [])\n\n\n  const addPerson = (event) => {\n    event.preventDefault()\n    const existPerson = persons.find(person => person.name === newName)\n    // console.log(isExist)\n    if ( existPerson === undefined ) {\n      const personObject = {\n        name: newName,\n        number: newNumber\n      }\n    \n      personService\n      .create(personObject)\n      .then(returnedPerson => {\n        setPersons(persons.concat(returnedPerson))\n        setNewName('')\n        setNewNumber('')\n        setNotification(\n          `${returnedPerson.name} is successfully added`\n        )\n        setTimeout(() => {\n          setNotification(null)\n        }, 3000)\n      })\n\n    }\n    else {\n      let answer = window.confirm(`${newName} is already added to phonebook, replace old number with new number?`)\n      if ( answer ) {\n        const changedPerson = {...existPerson, number: newNumber}\n        personService.update(existPerson.id, changedPerson)\n      .then(returnedNote => {\n        setPersons(persons.map(note => note.id !== existPerson.id ? note : returnedNote))\n        setNewName('')\n        setNewNumber('')\n        setNotification(\n          `${changedPerson.name} 's number is successfully changed`\n        )\n        setTimeout(() => {\n          setNotification(null)\n        }, 3000)\n      })\n      .catch(() => {\n        setErrorMessage(\n          `${changedPerson.name} 's information has been removed from the server`\n        )\n        setTimeout(() => {\n          setErrorMessage(null)\n        }, 3000)\n        personService.getAll().then(initialNotes => {setPersons(initialNotes)})\n      })\n      }\n    }\n    \n  }\n\n  const handleNewName = (event) => {\n    setNewName(event.target.value)\n  }\n\n  const handleNewNumber = (event) => {\n    setNewNumber(event.target.value)\n  }\n\n  const handleNewFilter = (event) => {\n    setNewFilter(event.target.value)\n  }\n\n  const deleteHandler = (person) => {\n    let answer = window.confirm(`Delete ${person.name} ?`)\n    if ( answer ) {\n        personService.deletePerson(person.id).then(() => {\n        personService\n      .getAll()\n      .then(initialNotes => {\n        setPersons(initialNotes)\n        setNotification(\n          `'${person.name}' is successfully deleted`\n        )\n        setTimeout(() => {\n          setNotification(null)\n        }, 3000)\n      }\n      )})\n      \n    }\n}\n  const personsToShow = nameFilter === ''\n    ? persons\n    : persons.filter(person => person.name.includes(nameFilter))\n\n\n  return (\n    <div>\n      <DisplayPhoneBook nameFilter={nameFilter} handleNewFilter={handleNewFilter} />\n      <br />\n      {errorMessage ? <Error message={errorMessage} /> : <></> }\n      {notification ? <Notification message={notification} /> : <></> }\n      <AddNewPerson addPerson={addPerson} newName={newName} newNumber={newNumber}\n                    handleNewName={handleNewName} handleNewNumber={handleNewNumber} />\n      \n      <h2>Numbers</h2>\n      {personsToShow.map((person,i) => \n        <p key={i}>{person.name} {person.number} <button onClick={() => deleteHandler(person)}> Delete </button></p>\n        )}\n    </div>\n  )\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}